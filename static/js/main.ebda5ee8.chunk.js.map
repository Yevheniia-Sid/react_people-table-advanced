{"version":3,"sources":["utils/searchHelper.ts","utils/variables.ts","types/Gender.ts","types/QueryParamsType.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PersonItem.tsx","types/SortFields.ts","components/PeopleTable.tsx","api.ts","utils/getPreparedPeople.ts","components/PeoplePage.tsx","utils/FilterSortPeople.ts","components/Navbar.tsx","components/HomePage.tsx","components/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","CENTURIES_LINK","Gender","QueryParamsType","SearchLink","children","params","props","useSearchParams","searchParams","to","search","PeopleFilters","setSearchParams","query","get","Query","sex","Sex","centuries","getAll","Centuries","className","classNames","Male","Female","type","placeholder","onChange","event","target","map","century","isActive","includes","newCentury","filter","cent","length","Loader","PersonLink","person","slug","name","PersonItem","born","died","mother","motherName","father","fatherName","useParams","SortFields","PeopleTable","people","sort","Sort","isOrder","has","Order","getSortQuery","sortField","order","Name","Born","Died","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","useEffect","getPeople","peopleFromServer","tempPerson","find","getPreparedPeople","catch","finally","visiblePeople","queryParams","sexFilter","centuriesFilter","filteredPeople","currentQuery","toLowerCase","Math","ceil","personA","personB","localeCompare","reverse","FilterSortPeople","isDisplayErrorMessage","isNoPeopleOnServer","isPeopleDisplayed","isNoPeopleDisplayed","getLinkClass","Navbar","role","HomePage","NotFoundPage","App","path","element","replace","createRoot","document","getElementById","render"],"mappings":"gRAIO,SAASA,EACdC,EACAC,GAEA,IAAMC,EAAY,IAAIC,gBACpBH,EAAcI,YAkBhB,OAfAC,OAAOC,QAAQL,GACZM,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACX,OAAVA,EACFP,EAAUQ,OAAOF,GACRG,MAAMC,QAAQH,IACvBP,EAAUQ,OAAOF,GAEjBC,EAAMF,SAAQ,SAAAM,GACZX,EAAUY,OAAON,EAAKK,EACvB,KAEDX,EAAUa,IAAIP,EAAKC,EAEtB,IAEIP,EAAUE,UAClB,CC5BM,IAGMY,EAAiB,CAAC,KAAM,KAAM,KAAM,KAAM,MCH3CC,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,UAAYA,EAAZ,SAAYA,EAAZ,WAAYA,CAAZ,MCAYC,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,cAAYA,EAAZ,UAAYA,EAAZ,sBAAYA,EAAZ,YAAYA,EAAZ,cAAYA,CAAZ,M,+CCeaC,EAA8B,SAAC,GAIrC,IAHLC,EAGI,EAHJA,SACAC,EAEI,EAFJA,OACGC,EACC,iBACJ,EAAuBC,cAAhBC,EAAP,oBAEA,OACE,cAAC,IAAD,yBAIEC,GAAI,CACFC,OAAQ3B,EAAcyB,EAAcH,KAElCC,GAPN,aASGF,IAGN,EC3BYO,EAAgB,WAC3B,MAAwCJ,cAAxC,mBAAOC,EAAP,KAAqBI,EAArB,KAEMC,EAAQL,EAAaM,IAAIZ,EAAgBa,QAAU,GACnDC,EAAMR,EAAaM,IAAIZ,EAAgBe,MAAQ,GAC/CC,EAAYV,EAAaW,OAAOjB,EAAgBkB,YAAc,GASpE,OACE,sBAAKC,UAAU,QAAf,UACE,mBAAGA,UAAU,gBAAb,qBAEA,oBAAGA,UAAU,aAAa,UAAQ,YAAlC,UACE,cAAC,EAAD,CACEA,UAAWC,IAAW,CAAE,aAAcN,IACtCX,OAAQ,CAAEW,IAAK,MAFjB,iBAMA,cAAC,EAAD,CACEK,UAAWC,IAAW,CAAE,YAAaN,IAAQf,EAAOsB,OACpDlB,OAAQ,CAAEW,IAAKf,EAAOsB,MAFxB,kBAMA,cAAC,EAAD,CACEF,UAAWC,IAAW,CAAE,YAAaN,IAAQf,EAAOuB,SACpDnB,OAAQ,CAAEW,IAAKf,EAAOuB,QAFxB,uBAQF,qBAAKH,UAAU,cAAf,SACE,oBAAGA,UAAU,yBAAb,UACE,uBACE,UAAQ,aACRI,KAAK,SACLJ,UAAU,QACVK,YAAY,SACZjC,MAAOoB,EACPc,SAxCV,SAA2BC,GACzB,IAAMvB,EAAS,CAAEQ,MAAOe,EAAMC,OAAOpC,OAAS,MACxCiB,EAAS3B,EAAcyB,EAAcH,GAE3CO,EAAgBF,EACjB,IAsCO,sBAAMW,UAAU,eAAhB,SACE,mBAAGA,UAAU,gBAAgB,cAAY,gBAK/C,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,iCAAiC,UAAQ,gBAAxD,UACE,qBAAKA,UAAU,aAAf,SACGrB,EAAe8B,KAAI,SAAAC,GAClB,IAAMC,EAAWd,EAAUe,SAASF,GAC9BG,EAAaF,EACfd,EAAUiB,QAAO,SAAAC,GAAI,OAAIA,IAASL,CAAb,IADE,sBAEnBb,GAFmB,CAERa,IAEnB,OACE,cAAC,EAAD,CAEE,UAAQ,UACR1B,OAAQ,CAAEa,UAAWgB,GACrBb,UAAWC,IACT,SACA,OACA,CAAE,UAAWU,IAPjB,SAUGD,GATIA,EAYV,MAGH,qBAAKV,UAAU,mBAAf,SACE,cAAC,EAAD,CACE,UAAQ,aACRA,UAAWC,IACT,SACA,aACA,CAAE,cAAoC,IAArBJ,EAAUmB,SAE7BhC,OAAQ,CAAEa,UAAW,MAPvB,wBAcN,qBAAKG,UAAU,cAAf,SACE,cAAC,EAAD,CACEA,UAAU,0CACVhB,OAAQ,CAAEW,IAAK,KAAME,UAAW,GAAIL,MAAO,MAF7C,mCASP,ECjHYyB,G,MAAS,kBACpB,qBAAKjB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,GCOTkB,EAA8B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC5C,OACE,cAAC,IAAD,CACE/B,GAAE,aAAQ+B,EAAOC,MACjBpB,UAAWC,IACT,CAAE,kBNdY,MMcOkB,EAAOxB,MAHhC,SAMGwB,EAAOE,MAGb,ECVYC,EAA8B,SAAC,GAAgB,IAAdH,EAAa,EAAbA,OAE1CxB,EAOEwB,EAPFxB,IACA4B,EAMEJ,EANFI,KACAC,EAKEL,EALFK,KACAC,EAIEN,EAJFM,OACAC,EAGEP,EAHFO,WACAC,EAEER,EAFFQ,OACAC,EACET,EADFS,WAGF,EAAsBC,cAAdT,YAAR,MAAe,GAAf,EAEA,OACE,qBACE,UAAQ,SACRpB,UAAWC,IACT,CAAE,yBAA0BkB,EAAOC,OAASA,IAHhD,UAME,6BACE,cAAC,EAAD,CAAYD,OAAQA,MAEtB,6BAAKxB,IACL,6BAAK4B,IACL,6BAAKC,IACL,6BACGC,EACG,cAAC,EAAD,CAAYN,OAAQM,IACpBC,IAEN,6BACGC,EACG,cAAC,EAAD,CAAYR,OAAQQ,IACpBC,MAIX,EChDWE,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,YAAYA,EAAZ,UAAYA,EAAZ,YAAYA,EAAZ,YAAYA,CAAZ,MCeaC,EAA+B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC7C,EAAuB9C,cAAhBC,EAAP,oBACM8C,EAAO9C,EAAaM,IAAIZ,EAAgBqD,MACxCC,EAAUhD,EAAaiD,IAAIvD,EAAgBwD,OAC3C7C,EAAQL,EAAaM,IAAIZ,EAAgBa,OAE/C,SAAS4C,EAAaC,GACpB,OAAIN,IAASM,EACJJ,EACH,CAAEF,KAAM,KAAMO,MAAO,MACrB,CAAEP,KAAMM,EAAWC,MTrBH,QSwBf,CAAEP,KAAMM,EAAWC,MAAO,KAClC,CAED,OACE,wBACE,UAAQ,cACRxC,UAAU,uDAFZ,UAIE,gCACE,+BACE,6BACE,uBAAMA,UAAU,8BAAhB,iBAEE,cAAC,EAAD,CACEhB,OAAQsD,EAAaR,EAAWW,MADlC,SAGE,sBAAMzC,UAAU,OAAhB,SACE,mBAAGA,UAAWC,IAAW,MACvB,CACE,UAAWT,IAAUsC,EAAWW,KAChC,aAAcR,IAASH,EAAWW,OAASN,EAC3C,eAAgBF,IAASH,EAAWW,MAAQN,eAQxD,6BACE,uBAAMnC,UAAU,8BAAhB,gBAEE,cAAC,EAAD,CACEhB,OAAQsD,EAAaR,EAAWlC,KADlC,SAGE,sBAAMI,UAAU,OAAhB,SACE,mBAAGA,UAAWC,IAAW,MACvB,CACE,UAAWT,IAAUsC,EAAWlC,IAChC,aAAcqC,IAASH,EAAWlC,MAAQuC,EAC1C,eAAgBF,IAASH,EAAWlC,KAAOuC,eAQvD,6BACE,uBAAMnC,UAAU,8BAAhB,iBAEE,cAAC,EAAD,CACEhB,OAAQsD,EAAaR,EAAWY,MADlC,SAGE,sBAAM1C,UAAU,OAAhB,SACE,mBAAGA,UAAWC,IAAW,MACvB,CACE,UAAWT,IAAUsC,EAAWY,KAChC,aAAcT,IAASH,EAAWY,OAASP,EAC3C,eAAgBF,IAASH,EAAWY,MAAQP,eAQxD,6BACE,uBAAMnC,UAAU,8BAAhB,iBAEE,cAAC,EAAD,CACEhB,OAAQsD,EAAaR,EAAWa,MADlC,SAGE,sBAAM3C,UAAU,OAAhB,SACE,mBAAGA,UAAWC,IAAW,MACvB,CACE,UAAWT,IAAUsC,EAAWa,KAChC,aAAcV,IAASH,EAAWa,OAASR,EAC3C,eAAgBF,IAASH,EAAWa,MAAQR,eAQxD,wCACA,6CAIJ,gCACGH,EAAOvB,KAAI,SAAAU,GAAM,OAChB,cAAC,EAAD,CACEA,OAAQA,GACHA,EAAOC,KAHE,QASzB,E,cC9HKwB,EAAU,oEAEhB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,GAC3B,C,sDAEM,iHAEED,EAAK,KACTK,MAAK,kBAAMC,MAAMP,EAAZ,IACLM,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,KAJX,4C,sBCNA,ICOMC,EAAa,WACxB,MAA4BC,mBAAmB,IAA/C,mBAAOvB,EAAP,KAAewB,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAAuB1E,cAAhBC,EAAP,oBAEA0E,qBAAU,WACRH,GAAa,GFRV,WAAP,+BESII,GACGZ,MAAK,SAAAa,GACJP,EDjByB,SAACO,GAChC,OAAOA,EACJtD,KAAI,SAAAU,GACH,IAAM6C,EAAa7C,EASnB,OAPA6C,EAAWtC,WAAaP,EAAOO,YXPR,IWQvBsC,EAAWpC,WAAaT,EAAOS,YXRR,IWSvBoC,EAAWvC,OAASsC,EACjBE,MAAK,SAAAxC,GAAM,OAAIA,EAAOJ,OAASF,EAAOO,UAA3B,IACdsC,EAAWrC,OAASoC,EACjBE,MAAK,SAAAtC,GAAM,OAAIA,EAAON,OAASF,EAAOS,UAA3B,IAEPoC,CACR,GACJ,CCGiBE,CAAkBH,GAC7B,IACAI,OAAM,kBAAMP,GAAW,EAAjB,IACNQ,SAAQ,kBAAMV,GAAa,EAAnB,GACZ,GAAE,IAEH,IAAMW,ECtBwB,SAC9BrC,EACAsC,GAEA,IAAM9E,EAAQ8E,EAAY7E,IAAIZ,EAAgBa,QAAU,GAClD6E,EAAYD,EAAY7E,IAAIZ,EAAgBe,KAC5C4E,EAAkBF,EAAYxE,OAAOjB,EAAgBkB,WACrDwC,EAAY+B,EAAY7E,IAAIZ,EAAgBqD,MAC5CM,EAAQ8B,EAAY7E,IAAIZ,EAAgBwD,OAE1CoC,EAAc,YAAOzC,GAwBzB,GAtBIxC,IACFiF,EAAiBA,EACd3D,QAAO,YAAuC,IAApCO,EAAmC,EAAnCA,KAAMK,EAA6B,EAA7BA,WAAYE,EAAiB,EAAjBA,WACrB8C,EAAelF,EAAMmF,cAE3B,OAAQtD,EAAKsD,cAAc/D,SAAS8D,KAA5B,OACLhD,QADK,IACLA,OADK,EACLA,EAAYiD,cAAc/D,SAAS8D,MAD9B,OAEL9C,QAFK,IAELA,OAFK,EAELA,EAAY+C,cAAc/D,SAAS8D,GACvC,KAGDH,IACFE,EAAiBA,EACd3D,QAAO,qBAAGnB,MAAkB4E,CAArB,KAGRC,EAAgBxD,SAClByD,EAAiBA,EACd3D,QAAO,gBAAGS,EAAH,EAAGA,KAAH,OAAciD,EACnB5D,SAAUgE,KAAKC,KAAKtD,EAAO,KAAMxD,WAD5B,KAIRwE,EAAW,CACb,OAAQA,GACN,KAAKT,EAAWW,KACdgC,EACGxC,MAAK,SAAC6C,EAASC,GAAV,OAAsBD,EAAQzD,KAAK2D,cAAcD,EAAQ1D,KAAzD,IACR,MAEF,KAAKS,EAAWlC,IACd6E,EACGxC,MAAK,SAAC6C,EAASC,GAAV,OAAsBD,EAAQnF,IAAIqF,cAAcD,EAAQpF,IAAxD,IACR,MAEF,KAAKmC,EAAWY,KACd+B,EAAexC,MAAK,SAAC6C,EAASC,GAAV,OAAsBD,EAAQvD,KAAOwD,EAAQxD,IAA7C,IACpB,MAEF,KAAKO,EAAWa,KACd8B,EAAexC,MAAK,SAAC6C,EAASC,GAAV,OAAsBD,EAAQtD,KAAOuD,EAAQvD,IAA7C,IAMpBgB,GACFiC,EAAeQ,SAElB,CAED,OAAOR,CACR,CDzCuBS,CAAiBlD,EAAQ7C,GAEzCgG,EAAwBxB,IAAYF,EACpC2B,GAAsBpD,EAAOhB,SAAWyC,IAAcE,EACtD0B,GAAqB5B,KAAeY,EAAcrD,SAAW2C,EAC7D2B,GAAuB7B,IAAcY,EAAcrD,SAAW2C,EAEpE,OACE,qCACE,oBAAI3D,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,mDAAf,WACIyD,GACA,qBAAKzD,UAAU,uCAAf,SACE,cAAC,EAAD,MAIJ,qBAAKA,UAAU,SAAf,SACE,sBAAKA,UAAU,sBAAf,UACGyD,GAAa,cAAC,EAAD,IAEb0B,GACC,mBAAG,UAAQ,qBAAqBnF,UAAU,kBAA1C,kCAKDoF,GACC,mBAAG,UAAQ,kBAAX,+CAKDE,GACC,yFAKDD,GACC,cAAC,EAAD,CAAarD,OAAQqC,gBAQpC,EEzEKkB,EAAe,SAAC,GAAD,IAAG5E,EAAH,EAAGA,SAAH,OAA0CV,IAC7D,cACA,CAAE,8BAA+BU,GAFd,EAKR6E,EAAS,WACpB,OACE,qBACE,UAAQ,MACRxF,UAAU,iCACVyF,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKzF,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CACEZ,GAAG,IACHY,UAAWuF,EAFb,kBAOA,cAAC,IAAD,CACEnG,GAAG,UACHY,UAAWuF,EAFb,0BAUT,ECnCYG,EAAqB,WAChC,OACE,oBAAI1F,UAAU,QAAd,sBAEH,ECJY2F,EAAe,WAC1B,OACE,oBAAI3F,UAAU,QAAd,2BAEH,ECIY4F,G,MAAM,WACjB,OACE,sBAAK,UAAQ,MAAb,UACE,cAAC,EAAD,IAEA,qBAAK5F,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO6F,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,IAAD,CAAU1G,GAAG,IAAI2G,SAAO,MACrD,cAAC,IAAD,CAAOF,KAAK,SAAZ,SACE,cAAC,IAAD,CAAOA,KAAK,SAASC,QAAS,cAAC,EAAD,QAEhC,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,EAAD,eAMpC,GCnBDE,qBAAWC,SAASC,eAAe,SAChCC,OACC,cAAC,IAAD,UACE,cAAC,EAAD,M","file":"static/js/main.ebda5ee8.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams,\n): string {\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null || '') {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  return newParams.toString();\n}\n","export const FEMALE = 'f';\nexport const NOT_SET_VALUE = '-';\nexport const COLUMN_NAMES = ['Name', 'Sex', 'Born', 'Died', 'Mother', 'Father'];\nexport const CENTURIES_LINK = ['16', '17', '18', '19', '20'];\nexport const DESCENDING = 'desc';\n","export enum Gender {\n  All = 'All',\n  Male = 'm',\n  Female = 'f',\n}\n","export enum QueryParamsType {\n  Query = 'query',\n  Sex = 'sex',\n  Centuries = 'centuries',\n  Sort = 'sort',\n  Order = 'order',\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { CENTURIES_LINK } from '../utils/variables';\nimport { Gender } from '../types/Gender';\nimport { QueryParamsType } from '../types/QueryParamsType';\nimport { SearchLink } from './SearchLink';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get(QueryParamsType.Query) || '';\n  const sex = searchParams.get(QueryParamsType.Sex) || '';\n  const centuries = searchParams.getAll(QueryParamsType.Centuries) || [];\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const params = { query: event.target.value || null };\n    const search = getSearchWith(searchParams, params);\n\n    setSearchParams(search);\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({ 'is-active': !sex })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={classNames({ 'is-active': sex === Gender.Male })}\n          params={{ sex: Gender.Male }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={classNames({ 'is-active': sex === Gender.Female })}\n          params={{ sex: Gender.Female }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES_LINK.map(century => {\n              const isActive = centuries.includes(century);\n              const newCentury = isActive\n                ? centuries.filter(cent => cent !== century)\n                : [...centuries, century];\n\n              return (\n                <SearchLink\n                  key={century}\n                  data-cy=\"century\"\n                  params={{ centuries: newCentury }}\n                  className={classNames(\n                    'button',\n                    'mr-1',\n                    { 'is-info': isActive },\n                  )}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames(\n                'button',\n                'is-success',\n                { 'is-outlined': centuries.length !== 0 },\n              )}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{ sex: null, centuries: [], query: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { FEMALE } from '../utils/variables';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      to={`../${person.slug}`}\n      className={classNames(\n        { 'has-text-danger': person.sex === FEMALE },\n      )}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonItem: React.FC<Props> = ({ person }) => {\n  const {\n    sex,\n    born,\n    died,\n    mother,\n    motherName,\n    father,\n    fatherName,\n  } = person;\n\n  const { slug = '' } = useParams();\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames(\n        { 'has-background-warning': person.slug === slug },\n      )}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother\n          ? <PersonLink person={mother} />\n          : motherName}\n      </td>\n      <td>\n        {father\n          ? <PersonLink person={father} />\n          : fatherName}\n      </td>\n    </tr>\n  );\n};\n","export enum SortFields {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonItem } from './PersonItem';\nimport { SearchParams } from '../utils/searchHelper';\nimport { SortFields } from '../types/SortFields';\nimport { QueryParamsType } from '../types/QueryParamsType';\nimport { DESCENDING } from '../utils/variables';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[],\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get(QueryParamsType.Sort);\n  const isOrder = searchParams.has(QueryParamsType.Order);\n  const query = searchParams.get(QueryParamsType.Query);\n\n  function getSortQuery(sortField: SortFields): SearchParams {\n    if (sort === sortField) {\n      return isOrder\n        ? { sort: null, order: null }\n        : { sort: sortField, order: DESCENDING };\n    }\n\n    return { sort: sortField, order: null };\n  }\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink\n                params={getSortQuery(SortFields.Name)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas',\n                    {\n                      'fa-sort': query !== SortFields.Name,\n                      'fa-sort-up': sort === SortFields.Name && !isOrder,\n                      'fa-sort-down': sort === SortFields.Name && isOrder,\n                    })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink\n                params={getSortQuery(SortFields.Sex)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas',\n                    {\n                      'fa-sort': query !== SortFields.Sex,\n                      'fa-sort-up': sort === SortFields.Sex && !isOrder,\n                      'fa-sort-down': sort === SortFields.Sex && isOrder,\n                    })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink\n                params={getSortQuery(SortFields.Born)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas',\n                    {\n                      'fa-sort': query !== SortFields.Born,\n                      'fa-sort-up': sort === SortFields.Born && !isOrder,\n                      'fa-sort-down': sort === SortFields.Born && isOrder,\n                    })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink\n                params={getSortQuery(SortFields.Died)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas',\n                    {\n                      'fa-sort': query !== SortFields.Died,\n                      'fa-sort-up': sort === SortFields.Died && !isOrder,\n                      'fa-sort-down': sort === SortFields.Died && isOrder,\n                    })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonItem\n            person={person}\n            key={person.slug}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { Person } from '../types';\nimport { NOT_SET_VALUE } from './variables';\n\nexport const getPreparedPeople = (peopleFromServer: Person[]) => {\n  return peopleFromServer\n    .map(person => {\n      const tempPerson = person;\n\n      tempPerson.motherName = person.motherName || NOT_SET_VALUE;\n      tempPerson.fatherName = person.fatherName || NOT_SET_VALUE;\n      tempPerson.mother = peopleFromServer\n        .find(mother => mother.name === person.motherName);\n      tempPerson.father = peopleFromServer\n        .find(father => father.name === person.fatherName);\n\n      return tempPerson;\n    });\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { getPreparedPeople } from '../utils/getPreparedPeople';\nimport { FilterSortPeople } from '../utils/FilterSortPeople';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then(peopleFromServer => {\n        setPeople(getPreparedPeople(peopleFromServer));\n      })\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const visiblePeople = FilterSortPeople(people, searchParams);\n\n  const isDisplayErrorMessage = isError && !isLoading;\n  const isNoPeopleOnServer = !people.length && !isLoading && !isError;\n  const isPeopleDisplayed = !isLoading && !!visiblePeople.length && !isError;\n  const isNoPeopleDisplayed = !isLoading && !visiblePeople.length && !isError;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {!isLoading && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {isDisplayErrorMessage && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {isNoPeopleOnServer && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {isNoPeopleDisplayed && (\n                <p>\n                  There are no people matching the current search criteria\n                </p>\n              )}\n\n              {isPeopleDisplayed && (\n                <PeopleTable people={visiblePeople} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\nimport { QueryParamsType } from '../types/QueryParamsType';\nimport { SortFields } from '../types/SortFields';\n\nexport const FilterSortPeople = (\n  people: Person[],\n  queryParams: URLSearchParams,\n): Person[] => {\n  const query = queryParams.get(QueryParamsType.Query) || '';\n  const sexFilter = queryParams.get(QueryParamsType.Sex);\n  const centuriesFilter = queryParams.getAll(QueryParamsType.Centuries);\n  const sortField = queryParams.get(QueryParamsType.Sort);\n  const order = queryParams.get(QueryParamsType.Order);\n\n  let filteredPeople = [...people];\n\n  if (query) {\n    filteredPeople = filteredPeople\n      .filter(({ name, motherName, fatherName }) => {\n        const currentQuery = query.toLowerCase();\n\n        return (name.toLowerCase().includes(currentQuery)\n        || motherName?.toLowerCase().includes(currentQuery)\n        || fatherName?.toLowerCase().includes(currentQuery));\n      });\n  }\n\n  if (sexFilter) {\n    filteredPeople = filteredPeople\n      .filter(({ sex }) => sex === sexFilter);\n  }\n\n  if (centuriesFilter.length) {\n    filteredPeople = filteredPeople\n      .filter(({ born }) => centuriesFilter\n        .includes((Math.ceil(born / 100)).toString()));\n  }\n\n  if (sortField) {\n    switch (sortField) {\n      case SortFields.Name:\n        filteredPeople\n          .sort((personA, personB) => personA.name.localeCompare(personB.name));\n        break;\n\n      case SortFields.Sex:\n        filteredPeople\n          .sort((personA, personB) => personA.sex.localeCompare(personB.sex));\n        break;\n\n      case SortFields.Born:\n        filteredPeople.sort((personA, personB) => personA.born - personB.born);\n        break;\n\n      case SortFields.Died:\n        filteredPeople.sort((personA, personB) => personA.died - personB.died);\n        break;\n\n      default: break;\n    }\n\n    if (order) {\n      filteredPeople.reverse();\n    }\n  }\n\n  return filteredPeople;\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive } : { isActive: boolean }) => classNames(\n  'navbar-item',\n  { 'has-background-grey-lighter': isActive },\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={getLinkClass}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to=\"/people\"\n            className={getLinkClass}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage: React.FC = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\nimport { HomePage } from './components/HomePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n            <Route path=\"people\">\n              <Route path=\":slug?\" element={<PeoplePage />} />\n            </Route>\n            <Route path=\"*\" element={<NotFoundPage />} />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}